// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for forecasting future expenses and investment needs based on past spending patterns.
 *
 * - forecastExpenses - A function that triggers the expense forecasting flow.
 * - ForecastExpensesInput - The input type for the forecastExpenses function.
 * - ForecastExpensesOutput - The return type for the forecastExpenses function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ForecastExpensesInputSchema = z.object({
  spendingPatterns: z
    .string()
    .describe(
      'A detailed description of past spending patterns, including amounts, categories, and dates.'
    ),
  financialGoals: z
    .string()
    .optional()
    .describe('Optional: User provided financial goals and investment preferences.'),
});
export type ForecastExpensesInput = z.infer<typeof ForecastExpensesInputSchema>;

const ForecastExpensesOutputSchema = z.object({
  projectedExpenses: z
    .string()
    .describe('A detailed projection of future expenses, broken down by category.'),
  investmentNeeds: z
    .string()
    .describe('An assessment of future investment needs to meet financial goals.'),
  recommendations: z
    .string()
    .optional()
    .describe('Optional: Recommendations for adjusting spending or investment strategies.'),
});
export type ForecastExpensesOutput = z.infer<typeof ForecastExpensesOutputSchema>;

export async function forecastExpenses(input: ForecastExpensesInput): Promise<ForecastExpensesOutput> {
  return forecastExpensesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'forecastExpensesPrompt',
  input: {schema: ForecastExpensesInputSchema},
  output: {schema: ForecastExpensesOutputSchema},
  prompt: `You are a personal finance advisor. Analyze the user's spending patterns and financial goals to forecast future expenses and investment needs.

Spending Patterns: {{{spendingPatterns}}}
Financial Goals: {{{financialGoals}}}

Based on this information, provide a detailed projection of future expenses, an assessment of investment needs, and recommendations for adjusting spending or investment strategies.

Output:{
  "projectedExpenses": "...",
  "investmentNeeds": "...",
  "recommendations": "..."
}`,
});

const forecastExpensesFlow = ai.defineFlow(
  {
    name: 'forecastExpensesFlow',
    inputSchema: ForecastExpensesInputSchema,
    outputSchema: ForecastExpensesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
